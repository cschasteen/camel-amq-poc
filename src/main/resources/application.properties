# Use Strimzi as it's power architecture compatible
quarkus.kafka.devservices.provider = strimzi

quarkus.log.category."com.redhat.naps.".level=${NAPS_LOG_LEVEL:INFO}

# Kafka topic Name
kafka.topic.name=my-topic

# Kafka brokers in native test
#%prod.camel.component.kafka.brokers=${BOOTSTRAP_URL:my-cluster-kafka-bootstrap:9092}
%prod.camel.component.kafka.brokers=${BOOTSTRAP_URL:kafka-boostrap-test-sroute-cws-project.apps.vapo-aws-eti.va.gov:8088}
#camel.component.kafka.brokers=${BOOTSTRAP_URL:my-cluster-kafka-bootstrap:9092}

# How often should the messages be generated and pushed to Kafka Topic
timer.period = 10000
timer.delay = 10000

# Kafka instance without Authentication
#camel.component.kafka.brokers=${brokers}

# uncomment to set Kafka instance with SASL Plain
#camel.component.kafka.brokers=${brokers}
#camel.component.kafka.security-protocol=SASL_SSL
#camel.component.kafka.sasl-mechanism=PLAIN
#camel.component.kafka.sasl-jaas-config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${id}" password="${secret}";

# uncomment to set Kafka instance with SASL Oauth Bearer
#camel.component.kafka.brokers = ${brokers}
#camel.component.kafka.security-protocol = SASL_SSL
#camel.component.kafka.sasl-mechanism = OAUTHBEARER
#camel.component.kafka.sasl-jaas-config = org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
#        oauth.client.id="${id}" \
#        oauth.client.secret="${secret}" \
#        oauth.token.endpoint.uri="${token}" ;
#camel.component.kafka.additional-properties[sasl.login.callback.handler.class] = io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler


###################################
# Kubernetes specific
###################################
# secrets
#quarkus.kubernetes-config.enabled=true
#getting secrets while deploying to kubernetes
#quarkus.kubernetes-config.namespace=test
#quarkus.kubernetes-config.secrets.enabled=true
#quarkus.kubernetes-config.secrets=camel-kafka

# creating container with jib
#quarkus.container-image.build=true
#quarkus.kubernetes.deployment-target=kubernetes
#quarkus.container-image.group=<YOUR_IMAGE_GROUP>
#quarkus.container-image.registry=<YOUR_REGISTRY_URL>

# Uncomment to trust self signed certificates if they are presented by the Kubernetes API server
#quarkus.kubernetes-client.trust-certs=true

# Uncomment to set resource limits
#quarkus.kubernetes.resources.requests.memory=64Mi
#quarkus.kubernetes.resources.requests.cpu=250m
#quarkus.kubernetes.resources.limits.memory=512Mi
#quarkus.kubernetes.resources.limits.cpu=1000m

###################################
# OpenShift specific
###################################
# secrets
#quarkus.kubernetes-config.enabled=true
#getting secrets while deploying to kubernetes
#quarkus.kubernetes-config.namespace=test
#quarkus.kubernetes-config.secrets.enabled=true
#quarkus.kubernetes-config.secrets=camel-kafka

# creating container for openshift
#quarkus.container-image.build=true
#quarkus.kubernetes.deployment-target=openshift

# OpenShift
#quarkus.openshift.image-pull-policy=IfNotPresent

# Uncomment to set resource limits
#quarkus.openshift.resources.requests.memory=64Mi
#quarkus.openshift.resources.requests.cpu=250m
#quarkus.openshift.resources.limits.memory=512Mi
#quarkus.openshift.resources.limits.cpu=1000m
